name: Publish to PyPI

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          pip install -r requirements.txt

      - name: Determine version
        id: get-version
        run: |
          # Get base version from pyproject.toml (assumes format X.Y.Z)
          BASE_VERSION=$(grep -oP '(?<=^version = ")[^"]+' pyproject.toml)

          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            # On tag: use tag version without the "v"
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            # On branch (dev build): increment patch version by 1
            IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
            PATCH=$((PATCH + 1))
            BUMPED_VERSION="$MAJOR.$MINOR.$PATCH"
            # Append dev timestamp with no dots (PEP440 compliant)
            DEV_SUFFIX=".dev$(date -u +%Y%m%d%H%M%S)"
            VERSION="$BUMPED_VERSION$DEV_SUFFIX"
          fi

          echo "Using version: $VERSION"
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set version in pyproject.toml
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ env.PACKAGE_VERSION }}\"/" pyproject.toml

      - name: Fill fillers
        run: |
          python3 fillReadme.py

      - name: Build the package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*
